#!/usr/bin/env bash

## Note: this depends on the color escape sequence variables in ../vars/colors

promptline () {
  # declare local variables
  local -i lastexit="$?"
  local prompt=
  local cwd=
  # commit history as we go
  history -w
  # show last exit error code
  [ ${lastexit} != 0 ] && prompt+="${tred}${lastexit} "
  # show background jobs
  [ -z "$(jobs -p)" ] || prompt+="${tpurple}[$(jobs -p | wc -l)] "
  # show time
  prompt+="${twhite}$(date +%H:%M:%S) "
  # show git info
  local gs="$(git status --porcelain=v2 --ignore-submodules=all -bsu 2>/dev/null)"
  if [ -n "${gs}" ] ; then
    local branch="$(awk -F '[ .]' '/##/{print $2}' <<< "${gs}")"
    local reponame="$(basename "$(git rev-parse --show-toplevel)")"
    local -i ahead="$(grep -oi '(?<=ahead )\d+' /dev/stdin <<< "${gs}" || echo 0)"
    local -i behind="$(grep -oi '(?<=behind )\d+' /dev/stdin <<< "${gs}" || echo 0)"
    local -i modified="$(grep -ci '^( |d|a|m|r){2}' /dev/stdin <<< "${gs}")"
    local -i untracked="$(grep -ci '^( |\?){2}' /dev/stdin <<< "${gs}")"
    prompt+="${twhite}["
    [ "${cwd}" != "${reponame}" ] && prompt+="${tcyan}${reponame} "
    [ -n "${branch}" ] && prompt+="${tpurple}${branch}"
    prompt+="${tbrown}"
    [ ${ahead} = 0 ] || prompt+=" A${ahead}"
    [ ${behind} = 0 ] || prompt+=" B${behind}"
    [ ${modified} = 0 ] || prompt+=" M${modified}"
    [ ${untracked} = 0 ] || prompt+=" U${untracked}"
    prompt+="${twhite}] "
  fi
  # add user@host
  if [ ${EUID} -gt 1024 ] ; then
    prompt+="${tlgreen}$(id -un)@${HOSTNAME}"
  elif [ ${EUID} -gt 0 ] ; then
    prompt+="${tyellow}$(id -un)@${HOSTNAME}"
  else
    prompt+="${tlred}$(id -un)@${HOSTNAME}"
  fi
  # show directory writability
  if [ -w "${PWD}" ] ; then
    prompt+="${tcyan}${tbold}:"
  else
    prompt+="${tred}${tbold}:"
  fi
  # get current path
  if [[ "${PWD}" =~ ${HOME}.* ]] ; then
    cwd="~${PWD#${HOME}}"
  else
    cwd="${PWD}"
  fi
  # chop current path if too long
  until [ $(($(echo -e "${prompt}" | sed 's/\x1B\[[0-9;]*[JKmsu]//g' | wc -c)+${#cwd})) -lt ${COLUMNS:-80} ] ; do
    cwd="${cwd/\/…\/$(basename "${PWD}")/}" # remove existing path abbreviation
    cwd="${cwd%/*}/…/$(basename "${PWD}")" # remove element from end of path and re-add abbreviation
    [ "${cwd}" = "~/…/$(basename "${PWD}")" ] && break # stop shortening if at minimum cwd
  done
  # show current path
  prompt+="${cwd} "
  prompt+="${fclear}\\n\\\$ "
  PS1="${prompt}"
}
