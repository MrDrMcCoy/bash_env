#!/usr/bin/env bash

## Note: this depends on the color escape sequence variables in ../vars/colors
function timer_now {
    date +%s%N
}

function timer_start {
    timer_start=${timer_start:-$(timer_now)}
}

function timer_stop {
    local delta_us=$((($(timer_now) - $timer_start) / 1000))
    local us=$((delta_us % 1000))
    local ms=$(((delta_us / 1000) % 1000))
    local s=$(((delta_us / 1000000) % 60))
    local m=$(((delta_us / 60000000) % 60))
    local h=$((delta_us / 3600000000))
    # Goal: always show around 3 digits of accuracy
    if ((h > 0)); then timer_show=${h}h${m}m
    elif ((m > 0)); then timer_show=${m}m${s}s
    elif ((s >= 10)); then timer_show=${s}.$((ms / 100))s
    elif ((s > 0)); then timer_show=${s}.$(printf %03d $ms)s
    elif ((ms >= 100)); then timer_show=${ms}ms
    elif ((ms > 0)); then timer_show=${ms}.$((us / 100))ms
    else timer_show=${us}us
    fi
    unset timer_start
}

trap 'timer_start' DEBUG

promptline () {
  # declare local variables
  local -i lastexit="$?"
  local prompt=
  local cwd=
  # show last exit error code
  [ ${lastexit} != 0 ] && prompt+="${tred}${lastexit} "
  # show time of last command
  timer_stop
  prompt+="${twhite}${timer_show} "
  # show background jobs
  [ -z "$(jobs -p)" ] || prompt+="${tpurple}[$(jobs -p | wc -l)] "
  # show time
  # prompt+="${twhite}$(date +%H:%M:%S) "
  # show git info
  local gs="$(git status --porcelain=v2 --ignore-submodules=all -bsu 2>/dev/null)"
  if [ -n "${gs}" ] ; then
    local branch="$(awk '/##/{print $2}' <<< "${gs}" | /usr/bin/sed 's/\.\.\..*//g')"
    local reponame="$(basename "$(git rev-parse --show-toplevel)")"
    local -i ahead="$(grep -oi '(?<=ahead )\d+' <<< "${gs}" || echo 0)"
    local -i behind="$(grep -oi '(?<=behind )\d+' <<< "${gs}" || echo 0)"
    local -i modified="$(grep -ci '^( |d|a|m|r){2}' <<< "${gs}")"
    local -i untracked="$(grep -ci '^( |\?){2}' <<< "${gs}")"
    prompt+="${twhite}["
    [ "${cwd}" != "${reponame}" ] && prompt+="${tcyan}${reponame} "
    [ -n "${branch}" ] && prompt+="${tpurple}${branch}"
    prompt+="${tbrown}"
    [ ${ahead} = 0 ] || prompt+=" A${ahead}"
    [ ${behind} = 0 ] || prompt+=" B${behind}"
    [ ${modified} = 0 ] || prompt+=" M${modified}"
    [ ${untracked} = 0 ] || prompt+=" U${untracked}"
    prompt+="${twhite}] "
  fi
  # add user@host
  if [ ${EUID} -gt 1024 ] ; then
    prompt+="${tlgreen}$(id -un)@${HOSTNAME}"
  elif [ ${EUID} -gt 0 ] ; then
    prompt+="${tyellow}$(id -un)@${HOSTNAME}"
  else
    prompt+="${tlred}$(id -un)@${HOSTNAME}"
  fi
  # show directory writability
  if [ -w "${PWD}" ] ; then
    prompt+="${tcyan}${tbold}:"
  else
    prompt+="${tred}${tbold}:"
  fi
  # get current path
  if [[ "${PWD}" =~ ${HOME}.* ]] ; then
    cwd="~${PWD#${HOME}}"
  else
    cwd="${PWD}"
  fi
  # chop current path if too long
  until [ $(($(echo -e "${prompt}" | /usr/bin/sed 's/\x1B\[[0-9;]*[JKmsu]//g' | wc -m)+${#cwd})) -le $((COLUMNS+25)) ] ; do
    cwd="${cwd/\/…\/$(basename "${PWD}")/}" # remove existing path abbreviation
    cwd="${cwd%/*}/…/$(basename "${PWD}")" # remove element from end of path and re-add abbreviation
    [ "${cwd}" = "~/…/$(basename "${PWD}")" ] && break # stop shortening if at minimum cwd
  done
  # show current path
  prompt+="${cwd} "
  # end formatting
  prompt+="${fclear}"
  # if not enough space, add newline
  [ $(echo -e "${prompt}" | /usr/bin/sed 's/\x1B\[[0-9;]*[JKmsu]//g' | wc -m) -ge $((COLUMNS+5)) ] && prompt+="\\n"
  # show user prompt character
  prompt+="\\\$ "
  # set bash promptline
  PS1="${prompt}"
  # commit history as we go
  # history -n # read new history from disk
  history -a # append to file
  # history -w # write out history to file
}
