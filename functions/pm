#!/usr/bin/env bash

pm() {
  local task="${1}"
  shift
  if command -v paru ; then
    local cmd="paru"
    local cleanup="paru --noconfirm -Sccd"
    local checkflags=(-Sy)
    local rmflags=(-Rsu)
    local searchflags=(-Ss --bottomup)
    local inflags=(-S
      --batchinstall
      --cleanafter
      --needed
      --norebuild
      --noredownload
      --noremovemake
      --skipreview
      --sudoloop
    )
    local upflags=(-Su
      --batchinstall
      --cleanafter
      --combinedupgrade
      --devel
      --needed
      --norebuild
      --noredownload
      --noremovemake
      --skipreview
      --sudoloop
    )
    local panicflags=(
      --batchinstall
      --cleanafter
      --rebuildall
      --redownloadall
      --removemake
      --skipreview
      --sudoloop
      -
    )
    local panicsearch=(paru -Qq)
    local panicreinstall=(paru -S)
  elif command -v zypper ; then
    local cmd="sudo zypper"
    local cleanup="sudo zypper clean"
    local checkflags=(refresh)
    local searchflags=(--no-refresh search --details)
    local inflags=(--no-refresh install
      --allow-unsigned-rpm
      --allow-vendor-change
      --auto-agree-with-licenses
      --download-in-advance
      --force-resolution
    )
    local upflags=(--no-refresh dist-upgrade
      --allow-downgrade
      --allow-name-change
      --allow-vendor-change
      --auto-agree-with-licenses
      --download-in-advance
      --force-resolution
    )
    local rmflags=(--no-refresh remove
      --clean-deps
      --force-resolution
    )
    local panicflags=()
    local panicsearch=(true)
    local panicreinstall=(sudo zypper install
      --force
      --allow-unsigned-rpm
      --allow-vendor-change
      --auto-agree-with-licenses
      --download-in-advance
      --force-resolution
      --no-recommends
      $(rpm -qa --qf '%{NAME} ')
    )
  elif command -v dnf ; then
    local cmd="sudo dnf"
    local cleanup="sudo dnf autoremove --cacheonly ; sudo dnf clean packages"
    local checkflags=(--refresh check-update)
    local searchflags=(search --cacheonly)
    local inflags=(install --best --allowerasing)
    local upflags=(upgrade --best --allowerasing)
    local rmflags=(remove --cacheonly)
    local panicflags=(--best --allowerasing "$@" $(rpm -qa --qf '%{NAME} '))
    local panicsearch=(true)
    local panicreinstall=(sudo dnf reinstall)
  else
    echo "ERROR: no supported package managers found."
    return
  fi
  case "${task}" in
    c*)
      ${cmd} ${checkflags[@]} "$@" || return
      ;;
    i*)
      ${cmd} ${inflags[@]} "$@" || return
      eval ${cleanup}
      ;;
    u*)
      ${cmd} ${upflags[@]} "$@" || return
      eval ${cleanup}
      ;;
    r*)
      ${cmd} ${rmflags[@]} "$@" || return
      eval ${cleanup}
      ;;
    p*)
      ${panicsearch[@]} | ${panicreinstall[@]} ${panicflags[@]} || return
      eval ${cleanup}
      ;;
    s*)
      ${cmd} ${searchflags[@]} "$@"
      ;;
    h*) fold -sw "${COLUMNS:-80}" <<EOF
pm: a package manager wrapper

Usage: pm [task] [argument]... [package]...

Tasks:
    check: check for new packages
    install: install packages
    upgrade: upgrade packages
    panic: reinstall all packages
    remove: remove packages
    search: searches packages
    help: print this text

Arguments: anything you would normally pass to your system package manager.

pm will set the preferred defaults of the author for each operation, then run a cleanup task at the end of a successful run. Don't like it, don't use it.

Supported package managers:
  - paru
  - zypper

More features will come eventually.
EOF
    ;;
    *) echo "ERROR: '${task}' is not implemented. Try 'pm help'" ;;
  esac
}

# This allows the function to be run as a script if this file is executed directly
[[ $- == *i* ]] || pm "$@"
