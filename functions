#!/usr/bin/env bash

portcheck () {
  if [[ $# == 0 ]]; then echo "ERROR: You must specify an option. Try -h for help." ; return ; fi
  local host=${1:-google.com}
  local port=${2:-80}
  local timeout=${4:-5}
  local tcmd
  case "$1" in
    --help|-h)
      fold -sw "${COLUMNS:-$(tput cols)}" <<< '
        portcheck - Checks if ports are open on remote hosts

        Usage:
            portcheck [host (google.com)] [port (80)] [timeout (5)]

        Examples:
            $ portcheck
            $ portcheck adlog1.ap1sfo1.lijit.com 8080 5
      ' | perl -pe 's/^ {8}//g' ; return ;;
  esac
  if command -v timeout && which apk; then tcmd="timeout -s 9 -t ${timeout}"
  elif command -v timeout; then tcmd="timeout -k 1 ${timeout}"
  elif command -v gtimeout; then tcmd="gtimeout -k 1 ${timeout}"
  else (>&2 echo "Warning: you do not have timeout installed.")
  fi >/dev/null 2>&1
  if ${tcmd} bash -c "echo -n >/dev/tcp/${host}/${port}"; then
    echo "Connection to $host on port $port is open"
  else
    echo "Connection to $host on port $port timed out"
  fi
}

gitprune () {
  git branch -d $(git branch --merged=master | grep -v master)
  git fetch --prune
}

flush_swap () {
  if [[ $# == 0 ]]; then echo "ERROR: You must specify an option. Try -h for help." ; return ; fi
  case "$1" in
    --help|-h)
      fold -sw "${COLUMNS:-$(tput cols)}" <<< '
        flush_swap - drains swap on one or more remote hosts

        Usage:
            flush_swap [hostname ...]

        Examples:
            $ flush_swap adlog1.ap1sea1.lijit.com adlog2.ap1sea1.lijit.com
            $ flush_swap root@ad{1..16}.ap{1..4}sfo1.lijit.com
      ' | perl -pe 's/^ {8}//g' ; return ;;
  esac
  for host in "$@" ; do
    echo -e "\nFlushing swap on $host"
    ssh -t "$host" bash <<< '
      trap exit INT TERM QUIT KILL HUP ERR
      until [ $(awk "/SwapCached/{print \$2}" /proc/meminfo) = 0 ]; do
        if [ $(awk "/SwapCached/{print \$2}" /proc/meminfo) -lt $(awk "/MemFree/{print \$2}" /proc/meminfo) ]; then
          free -h
          echo "Flushing swap..."
          swapoff -av
        else
          free -h
          echo "Not enough free memory to flush swap."
        fi
        sleep 2
        echo -en "\e[5A"
      done
      echo -e "\n"
      swapon -av
      free -h
      echo -e "Swap clear"
    '
  done
}


ntp_update () {
  if [[ $# == 0 ]]; then echo "ERROR: You must specify an option. Try -h for help." ; return ; fi
  case "$1" in
    --help|-h)
      fold -sw "${COLUMNS:-$(tput cols)}" <<< '
        ntp_update - updates clock via NTP on one or more remote hosts

        Usage:
            ntp_update [hostname ...]

        Examples:
            $ ntp_update adlog1.ap1sea1.lijit.com adlog2.ap1sea1.lijit.com
            $ ntp_update root@ad{1..16}.ap{1..4}sfo1.lijit.com
      ' | perl -pe 's/^ {8}//g' ; return ;;
  esac
  for host in "$@" ; do
    ssh -t "$host" bash -v <<< '
      trap exit INT TERM QUIT KILL HUP ERR
      service ntp stop
      ntpd -gq
      service ntp start
      sntp -s 132.163.97.1
      date
    '
  done
}

setproxy () {
  local host=${1:-squid1.dfw2.lijit.com}
  local port=${2:-3128}
  export http_proxy="http://${host}:${port}"
  export https_proxy="https://${host}:${port}"
}

flogs () { # find logs and print
  find -L "$1" -maxdepth 1 -type f -iname "*.log" | \
    while read -r l ; do
      echo -e "\n$l\n"
      tail -n 200 "$l" | LC_ALL=C grep -iPC2 'err|fatal|except|fail|caused by|\tat\s'
    done \
  |& less -SIr
}

hardreset () {
  for m in s u s b ; do echo $m > /proc/sysrq-trigger ; done
}

cr () { # Color reader
  case "$1" in
    *log*|messages) colorize < "$1" | less -SIr ;;
    *) less -SIr "$1" ;;
  esac
}

ahab () {
  [[ $# -gt 0 ]] || echo "ERROR: You must specify an option. Try -h for help."
  while (($#)) ; do
    case "$1" in
      --help|-h)
        fold -sw "${COLUMNS:-$(tput cols)}" <<< '
          ahab - prunes Docker images

          Usage:
              ahab [options] ...

          Options:
              --kill
              -k
                  Kills running containers and deletes their image and volumes
              --images
              -i
                  Prunes images that are not running
              --volumes
              -v
                  Prunes volumes that are not running

          Examples:
              $ ahab -i -v
              $ ahab -k -i -v
        ' | perl -pe 's/^ {10}//g' ; return ;;
      --kill|-k)
        echo "Killing containers..."
        docker ps -aq | while read -r id ; do docker rm -fv $id ; done ;;
      --images|-i)
        echo "Removing unused images..."
        docker system prune -af ;;
      --volumes|-v)
        echo "Removing unused volumes..."
        docker volume prune -f ;;
      -*) echo "ERROR: Option '$1' is not defined." ;;
    esac
    shift
  done
}


ffv () {
  # usage: ffv srcfile destdir
  local SRCFILE="${1##*/}"
  local DSTFILE="${2:-${SRCFILE%.*}}.webm"
  local WIDTH=$(ffmpeg -i "$1" |& grep --color=never -Po '\d+(?=x\d+(,| ))')
  if [ ${WIDTH} -gt 1920 ]; then
    local SHRINK=",scale=1920:-1"
  fi
  echo Converting ${SRCFILE} to ${DSTFILE}
  ffmpeg \
    -loglevel error \
    -stats \
    -i "${1}" \
    -b:v 0 \
    -c:a libopus \
    -c:v libvpx-vp9 \
    -crf 24 \
    -r 24 \
    -threads 8 \
    -speed 8 \
    -tile-columns 6 \
    -frame-parallel 1 \
    -strict -2 \
    -vf hqdn3d${SHRINK:-} \
    $3 \
    "${DSTFILE}"
}

ffc () {
  # Usage: ffc fileglob destfile options
  for f in $1 ; do
    echo "file './$f'"
  done \
    | sort \
    | tee ffc
  ffmpeg \
    -loglevel error \
    -stats \
    -f concat \
    -safe 0 \
    -i ffc \
    -c copy \
    $3 $2
}

duc () {
  du -xam "$1" | distribution -g
}
