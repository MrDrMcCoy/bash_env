#!/usr/bin/env bash

portcheck () {
  local host=${1:-google.com}
  local port=${2:-80}
  local proto=${3:-tcp}
  local timeout=${4:-5}
  if which timeout; then tcmd="timeout -k 1 ${timeout}"
  elif which gtimeout; then tcmd="gtimeout -k 1 ${timeout}"
  else tcmd=""; (>&2 echo "Warning: you do not have timeout installed.")
  fi 2>&1 >/dev/null
  if ${tcmd} bash -c "echo -n >/dev/${proto}/${host}/${port}"; then
    echo "$proto connection to port $port is open on $host"
  else
    echo "$proto connection to port $port timed out connecting to $host"
  fi
}

gitprune () {
  git branch -d $(git branch --merged=master | grep -v master)
  git fetch --prune
}

resetadsrv () {
	for host in "$@" ; do
    echo -e "\nRestarting ad services on $host"
    sudo ssh "$host" bash -v <<< "
      trap exit INT TERM QUIT KILL HUP ERR
      service syslog-ng restart
      service nagios-nrpe-server restart
      service raptor stop
      service blackbird stop
      service nginx restart
      sleep 2
      service raptor start
      service blackbird start
      /usr/share/lijit-podlogging/bin/podlogging restart
      /usr/share/lijit-headersuite-service/bin/headersuite-service restart
      iptables-restore < /etc/iptables.rules
    "
  done
}

resetswap () {
  for host in "$@" ; do
    echo -e "\nResetting swap on $host"
    ssh "$host" bash -v <<< '
      trap exit INT TERM QUIT KILL HUP ERR
      service snmpd stop || true
      until [ $(awk "/SwapCached/{print \$2}" /proc/meminfo) = 0 ]; do
        if [ $(awk "/SwapCached/{print \$2}" /proc/meminfo) -lt $(awk "/MemFree/{print \$2}" /proc/meminfo) ]; then
          free -h
          echo "Flushing swap..."
          swapoff -av
        else
          free -h
          echo "Not enough free memory to flush swap."
        fi
        sleep 2
        echo -en "\e[5A"
      done
      echo -e "\n"
      swapon -av
      free -h
      echo -e "Swap clear"
    '
  done
}

ntp-update () {
  for host in "$@" ; do
    ssh "$1" bash -v <<< '
      trap exit INT TERM QUIT KILL HUP ERR
      service ntp stop ; ntpd -gq ; service ntp start
      sntp -s 10.106.113.12
    '
  done
}

setproxy () {
  local host=${1:-squid1.dfw2.lijit.com}
  local port=${2:-3128}
  export http_proxy="http://${host}:${port}"
  export https_proxy="https://${host}:${port}"
}

oomclear () {
  for host in "$@" ; do
    ssh "$1" bash -v <<< '
      dmesg -c >> /var/log/dmesg
      free -h
    '
  done
}

flogs () { # find logs and print
  find -L "$1" -maxdepth 1 -type f -iname "*.log" | \
    while read -r l ; do
      echo -e "\n$l\n"
      tail -n 200 "$l" | LC_ALL=C grep -iPC2 'err|fatal|except|fail|caused by|\tat\s'
    done \
  |& less -SIr
}

hardreset () {
  for m in s u s b ; do echo $m > /proc/sysrq-trigger ; done
}

cr () { # Color reader
  case "$1" in
    *log*|messages) colorize < "$1" | less -SIr ;;
    *) less -SIr "$1" ;;
  esac
}

ahab () { # purges all containers and optionally volumes/images from docker
  echo "Removing containers..."
  docker container ls --all | awk '{print $1}' | tail -n +2 \
    | while read -r id ; do
        docker container kill $id
        docker container rm $id
      done
  while (($#)) ; do
    case "$1" in
      --volume|-v)
        shift
        echo "Removing volumes..."
        docker volume ls | awk '{print $2}' | tail -n +2 \
          | while read -r id ; do
              docker volume rm $id
            done
      ;;
      --image|-i)
        shift
        echo "Removing images..."
        docker image ls | awk '{print $3}' | tail -n +2 \
          | while read -r id ; do
              docker image rm $id
            done
      ;;
      -*) echo "ERROR" "Option '$1' is not defined." ;;
    esac
    shift
  done
}

ffv () {
  # usage: ffv srcfile destdir
  local SRCFILE="${1##*/}"
  local DSTFILE="${2:-${SRCFILE%.*}}.webm"
  local WIDTH=$(ffmpeg -i "$1" |& grep --color=never -Po '\d+(?=x\d+(,| ))')
  if [ ${WIDTH} -gt 1920 ]; then
    local SHRINK=",scale=1920:-1"
  fi
  echo Converting ${SRCFILE} to ${DSTFILE}
  ffmpeg \
    -loglevel error \
    -stats \
    -i "${1}" \
    -b:v 0 \
    -c:a libopus \
    -c:v libvpx-vp9 \
    -crf 24 \
    -r 24 \
    -threads 16 \
    -speed 8 \
    -tile-columns 6 \
    -frame-parallel 1 \
    -strict -2 \
    -vf hqdn3d${SHRINK:-} \
    $3 \
    "${DSTFILE}"
}

ffc () {
  # Usage: ffc fileglob destfile options
  for f in $1 ; do
    echo "file './$f'"
  done \
    | sort \
    | tee ffc
  ffmpeg \
    -loglevel error \
    -stats \
    -f concat \
    -safe 0 \
    -i ffc \
    -c copy \
    $3 $2
}

duc () {
  du -xam "$1" | distribution -g
}
