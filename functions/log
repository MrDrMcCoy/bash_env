#!/usr/bin/env bash

log () {
  # Function to send log output to file, syslog, and stderr
  # Usage:
  #   command |& log [severity]
  #   log [severity] [message]
  # Variables:
  #   LOGLEVEL: The cutoff for message severity to log (Default is INFO).
  #   LOGFILE: Path to a log file to write messages to (Default is to skip file logging).
  #   TRACEDEPTH: Sets how many function levels above this one to start a stack trace (Default is 1).
  local -u SEVERITY="${1:-NOTICE}"
  local LOGMSG="${2:-$(cat /dev/stdin)}"
  [[ -n "$LOGMSG" ]] || return 0
  local -i TRACEDEPTH=${TRACEDEPTH:-1} # 0 would be this function, which is not useful
  until [[ ! "${FUNCNAME[$TRACEDEPTH]}" =~ bash4check|quit|log ]] ; do
    # We want to look above these functions as well
    ((TRACEDEPTH++)) ||:
  done
  local LOGTAG="${SCRIPT_NAME:-$(basename "$0")} ${FUNCNAME[$TRACEDEPTH]}"
  local -a LOGLEVELS=(EMERGENCY ALERT CRITICAL ERROR WARN NOTICE INFO DEBUG)
  local -a LOGCOLORS=("red bold underline" "red bold" "red underline" "red" "magenta" "cyan" "white" "yellow")
  local -u LOGLEVEL="${LOGLEVEL:-INFO}"
  local -i NUMERIC_LOGLEVEL="$(inarray "${LOGLEVELS[@]}" "${LOGLEVEL}")"
  local -i NUMERIC_LOGLEVEL="${NUMERIC_LOGLEVEL:-6}"
  local -i NUMERIC_SEVERITY="$(inarray "${LOGLEVELS[@]}" "${SEVERITY}")"
  local -i NUMERIC_SEVERITY="${NUMERIC_SEVERITY:-5}"
  # If EMERGENCY, ALERT, CRITICAL, or DEBUG, append stack trace to LOGMSG
  if [[ "$SEVERITY" == "DEBUG" ]] || [[ "${NUMERIC_SEVERITY}" -le 2 ]] ; then
    # If DEBUG, include the command that was run
    for (( i = TRACEDEPTH; i < ${#FUNCNAME[@]}; i++ )) ; do
      LOGMSG+=" > ${BASH_SOURCE[$i]}:${FUNCNAME[$i]}:${BASH_LINENO[$i-1]}"
    done
  fi
  # Send message to logger
  if [ "${NUMERIC_SEVERITY}" -le "${NUMERIC_LOGLEVEL}" ] ; then
    tr '\n' ' ' <<< "${LOGMSG}" | logger -s -p "user.${NUMERIC_SEVERITY}" -t "${LOGTAG} " |& \
      if [ -n "${LOGFILE:-}" ] && [ ! -t 0 ] ; then
        tee -a "${LOGFILE}" | pprint ${LOGCOLORS[$NUMERIC_SEVERITY]}
      elif [ ! -t 0 ]; then
        pprint ${LOGCOLORS[$NUMERIC_SEVERITY]} < /dev/stdin
      fi
  fi 1>&2
}

# Shorthand log functions
log_debug () { log "DEBUG" "$*" ; }
log_info () { log "INFO" "$*" ; }
log_note () { log "NOTICE" "$*" ; }
log_warn () { log "WARN" "$*" ; }
log_err () { log "ERROR" "$*" ; }
log_crit () { log "CRITICAL" "$*" ; }
log_alert () { log "ALERT" "$*" ; }
log_emer () { log "EMERGENCY" "$*" ; }

# This allows the function to be run as a script if this file is executed directly
# [[ $- == *i* ]] || log "$@"
